%% COMPUTE THE DISPLACEMENT USING FFT SHIFT

clc
global hd
clearvars -except hd
fig = clf('reset')  ;

% Parameters
    camID = 1 ;
    frames = 1:1000 ; hd.nFrames ; 20000 ;
    refFrame = 1 ;
    dimDisp = 1 ; % Dimension of the image to eval. displacements
    trunc = 10 ; % Truncation to limit high wavenumbers noise effect
    fit = 'TLS' ; % Phase fit: 'LS' or 'TLS'
    U0 = size(hd.Images{camID}{1},1)/2 ;

% Import Images
    IMG = cat(4,hd.Images{camID}{frames}) ;
    
% Work dimensions 
   dimOrder = [dimDisp,setdiff(1:ndims(IMG),dimDisp)] ;
   [~,invDimOrder] = sort(dimOrder) ;
   IMG = permute(IMG,dimOrder) ;
    
    
% Compute the displacement
    kk = (trunc+1:size(IMG,1)-trunc) ;
    wtbr = waitbar(0,'Processing...') ;
    H = hankel(kk(1:end/2),kk(end/2:end)) ;
    Z = zeros(size(IMG(1,:,:,:))) ;
    for pt = 1:size(IMG,2)
        fftRef = conj(fftshift(fft(IMG(:,pt,:,refFrame),[],1),1)) ;
        for fr = 1:size(IMG,4)
            % Take the FFT and compute the normalized cross spectrum
                fftI = fftshift(fft(IMG(:,pt,:,fr),[],1),1) ;
                shift = fftRef.*fftI ;
                shift = shift./abs(shift+eps) ; % '+eps' avoids division by zero
            % Find the displacement
                switch fit
                    case 'LS'
                        shiftUP = shift(kk(1:end-1)) ;
                        shiftDOWN = shift(kk(2:end)) ;
                        normUP = sum(abs(shiftUP).^2,1) ;
                        Z(:,pt,:,fr) = sum(conj(shiftUP).*shiftDOWN./normUP,1) ;
                    case 'TLS'
                        S = shift ;
                        S = S(H) ;
                        [W,ev] = eig(S*S','vector') ;
                        [ev,indSort] = sort(ev,'descend') ;
                        Z(:,pt,:,fr) = W(1:end-1,indSort(1))\W(2:end,indSort(1)) ;
                end
        end
        %disp([fr,pt]) ;
        wtbr = waitbar(pt/size(IMG,2),wtbr,['Processing (',num2str(pt/size(IMG,2)*100,'%.1f'),' \%)...']) ;
    end
    delete(wtbr) ;
    U = real(1i*log(Z))*size(IMG,1)/2/pi ;
    
% Show a first result
    fig = clf('reset')  ;
    imagesc(squeeze(IMG(:,1,:,:))) ;
        colormap gray
        axis tight
        plot(squeeze(U(:,1,:,:))+U0)
    
    
%% ANIMATE RESULT

    fig = clf('reset') ;
    im = imagesc(IMG(:,:,:,1)) ;
        colormap gray
        axis tight
        pl = plot(squeeze(U(:,1,:,:))+U0,'r') ;

    for fr = 1:size(IMG,4)
        im.CData = squeeze(IMG(:,:,:,fr)) ;
        pl.YData = U(:,:,:,fr) + U0 ;
        drawnow ;
        pause(.02)
    end
    
%% MEAN DISPLACEMENT OVER TIME
    Um = squeeze(sqrt(mean(abs(U).^2,2))) ;
    WIN = reshape(exp(-(0:length(Um)-1)'/length(Um)*log(200)),1,1,1,[]) ; 
    Um = Um.*WIN(:) ;
    fig = clf('reset')  ;
        plot(Um)
        
    
    

%% HARMONIC REGIME
    
    Fi = 20000 ;
    tfU = squeeze(fft(U.*WIN,[],4)) ;
    f = (0:size(tfU,2)-1)/size(tfU,2)*Fi ;
    
    fig = clf('reset')  ;
    ax = gobjects(0) ;
    ax(1) = mysubplot(2,1,1) ;
        plot(f,sqrt(mean(abs(tfU).^2,1)),'k') ;
            set(gca,'xscale','log','yscale','log') ;
            set(gca,'xlim',[f(2) Fi/2])
            grid on
        line = plot(f(2)*[1 1],get(gca,'ylim'),':r') ;
    ax(2) = mysubplot(2,1,2) ;
        pl = plot(real(tfU(:,2)),'k') ;
        
    indX = @()closest(f,ax(1).CurrentPoint(1,1)) ;
    fig.WindowButtonMotionFcn = [...
            'set(line,''XData'',f(indX())*[1 1])' ...
            ,', set(pl,''YData'',real(tfU(:,indX())))'
                                ] ;
                            
                            
%% APPLY ESPRIT (EXTRACT WAVENUMBERS)

    R0 = 1:2 ;
    FUNC = 'cos' ;
    CRITERION = 'SAMOS' ;
    compute_dK = true ;
    indF = 2:numel(f)/2 ; hd.nFrames ; 10000 ;
    indX = 100:size(tfU,1)-100 ;
    
    K = ones(length(indF),max(R0))*NaN ;
    dK = ones(length(indF),max(R0))*NaN ;
    A = ones(length(indF),max(R0))*NaN ;
    for ff = 1:length(indF)
        out = ESPRIT_fcn(tfU(indX,indF(ff)),1,'R0',R0,'CRITERION',CRITERION,'FUNC',FUNC,'COMPUTE_dK',compute_dK,'COMPUTE_U',true) ;
        nk = length(out.K) ;
        K(ff,1:nk) = out.K ;
        dK(ff,1:nk) = out.dK ;
        A(ff,1:nk) = out.U ;
        ff
    end
    
%% Plot the result

    gammaMin = 1e-4 ;
    gammaMax = 1e-1 ;
    dKmax = 1e-3 ;
    relAmin = e-3 ;
    res = 1260/.42;%6000 ; % pix/m

    F = reshape(f(indF),[],1)*ones(1,max(R0)) ;
    gamma = abs(imag(K)./real(K)) ;
    normU = sqrt(sum(abs(tfU(indX,indF)).^2,1)) ;
    relA = A./normU(:) ;
    
    valid = true(size(K)) ; valid = valid(:) ;
    valid = valid & gamma(:)>gammaMin & gamma(:)<gammaMax ;
    %valid = valid & dK(:)<dKmax ;
    valid = valid & abs(relA(:))>relAmin ;
    
    
    fig = clf('reset') ;
        ax = gobjects(0) ;
        ax(1) = mysubplot(2,1,1) ;
            plot(F(valid),2*pi*F(valid)./abs(real(K(valid)))/res,'.k','tag','experimental') ;
            %scatter(F(valid),2*pi*F(valid)./abs(real(K(valid))),2,log10(abs(gamma(valid)))) ; colorbar
            set(gca,'yscale','log')
            grid on
            set(gca,'xscale','log')
        ax(2) = mysubplot(2,1,2) ;
            plot(F(valid),gamma(valid),'.k') ;
            set(gca,'yscale','log')
            grid on
            %set(gca,'xscale','log')
            
            
%% SAVE THE RESULTS

[file,path] = uiputfile([hd.WorkDir.Path,'\',hd.Cameras(camID).Name,'.mat'],'Save the results') ;
if path==0 ; return ; end

save([path,file],'Fi','U','K')



%% THEORETICAL PREDICTIONS

E = 3.8e9 ; 2.8e9 ;
N = 240e-3*9.81 ; 2.25 ;
D = .58e-3 ;
rho = 345e-6/(pi*D^2/4*.99) ; 1150 ;

S = pi*(D/2)^2 ;
I = pi*D^4/64 ;
sigma = N/S
omega = 2*pi*f(indF) ;
kb = sqrt(omega).*(rho*S/E/I)^(1/4) ;

alpha = N/2/sqrt(rho*S*E*I) ;

k = sqrt((sqrt(alpha^2./omega.^2 + 1) - alpha./omega)).*kb ;

delete(findobj(gcf,'tag','prediction')) ;
plot(ax(1),f(indF),real(omega./k),'linewidth',1,'tag','prediction') ;
    
        

    
    
    
    
    